#!/bin/bash
# A gamepad profiler that integrates with antimicro.
# Requires elevation in order to silence the gamepads to all but root.

exit_usage () { echo "Usage: padfiler start|stop|create|edit profile"; exit 1; }
[[ $# -lt 1 ]] && exit_usage
[[ ! -x $(which sudo) ]] && echo "Can't run without sudo." && exit 1

# Make sure there are even joysticks.
joys=$(find /dev/input -maxdepth 1 -name "js*" | wc -l)
[[ $joys -lt 1 ]] && exit;

# Find antimicro binary.
[[ -x "$antimicro_bin" ]] || { antimicro_bin="$(which antimicro)"
[[ -x "$antimicro_bin" ]] || { antimicro_bin="/usr/bin/antimicro"
[[ -x "$antimicro_bin" ]] || { antimicro_bin="/usr/local/bin/antimicro"
[[ -x "$antimicro_bin" ]] || { antimicro_bin="/usr/games/antimicro"
[[ -x "$antimicro_bin" ]] || { antimicro_bin="/usr/local/games/antimicro"
[[ -x "$antimicro_bin" ]] || { echo "Antimicro not found."; exit 1; } } } } } }

# Find padfile dir.
[[ -d "$padfiles_dir" ]] || { padfiles_dir="$XDG_CONFIG_HOME/padfiles"
[[ -d "$padfiles_dir" ]] || { conf_dir="$HOME/.config/padfiles"
[[ -d "$padfiles_dir" ]] || {
    if [[ -d "$XDG_CONFIG_HOME" ]]; then
        padfiles_dir="$XDG_CONFIG_HOME/padfiles"
    else padfiles_dir="$HOME/.config/padfiles"; fi
    mkdir -p "$padfiles_dir" 
} } }

task="$1"
padfile="$2"
padfile2="$3"

padfile_path="$padfiles_dir/$padfile.xml"
[[ -n "$padfile2" ]] && [[ $joys -ge 2 ]] && \
    padfile2_path="$padfiles_dir/$padfile2.xml"

case "$task" in
start)
    [[ -z "$padfile" ]] && exit_usage
    [[ "$(whoami)" != "root" ]] && exec sudo "$0" "$@"
    "$0" lock-all

    echo "--== Starting gamepad profiler: $padfile $padfile2"
    "$antimicro_bin" --hidden --no-tray --profile "$padfile_path" &

    # This hack allows assigning different profiles to different controllers.
    if [[ -n "$padfile2_path" ]]; then
        sleep 1 && pkill -9 -f antimicro
        "$antimicro_bin" --hidden --no-tray --profile "$padfile2_path" \
         --profile-controller 2 &
    fi
    ;;
stop)
    [[ "$(whoami)" != "root" ]] && exec sudo "$0" "$@"
    pkill -f antimicro  # Antimicro doesn't like to be quit nicely.
    "$0" unlock
    ;;
create)
    [[ -z "$padfile" ]] && exit_usage
    if [[ -e "/etc/padfiles/_temp_.xml" ]]; then
        cp "/etc/padfiles/_temp_.xml" "$padfile_path"
    else
        echo "<?xml version="1.0" encoding="UTF-8"?>
<joystick configversion="4">
    <sets>
    </sets>
</joystick>" > "$padfile_path"
    fi
    "$antimicro_bin" --no-tray --profile "$padfile_path"
    ;;
edit)
    [[ -z "$padfile" ]] && exit_usage
    "$antimicro_bin" --no-tray --profile "$padfile_path"
    ;;
lock-js)
    [[ "$(whoami)" != "root" ]] && exec sudo "$0" "$@"
    echo "--== Disabling JS devices"
    for d in /dev/input/js*; do
        echo "-= Locking $d"
        chmod 0600 $d
    done
    ;;
lock-event)
    [[ "$(whoami)" != "root" ]] && exec sudo "$0" "$@"
    echo "--== Disabling event joysticks"
    for d in /dev/input/event*; do
        (udevadm info --name $d | grep ID_INPUT_JOYSTICK &> /dev/null) && \
         echo "-= Locking $d" && chmod 0600 $d
    done
    ;;
lock-all)
    [[ "$(whoami)" != "root" ]] && exec sudo "$0" "$@"
    "$0" lock-js
    "$0" lock-event
    ;;
unlock)
    [[ "$(whoami)" != "root" ]] && exec sudo "$0" "$@"
    echo "--== Re-enabling joystick devices"
    for d in /dev/input/js*; do
        echo "-= Unlocking $d"
        chmod 0644 $d
    done
    for d in /dev/input/event*; do
        (udevadm info --name $d | grep ID_INPUT_JOYSTICK &> /dev/null) && \
         echo "-= Unlocking $d" && chmod 0644 $d
    done
    ;;
esac
